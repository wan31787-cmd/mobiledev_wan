import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:mobiledev_wan/services/notification_service.dart';
import 'firestore_api.dart';

class AddMedicationPage extends StatefulWidget {
  final String username;
  const AddMedicationPage({super.key, required this.username});

  @override
  State<AddMedicationPage> createState() => _AddMedicationPageState();
}

class _AddMedicationPageState extends State<AddMedicationPage> {
  List<Map<String, String>> medications = [];

  final _formKey = GlobalKey<FormState>();
  final TextEditingController nameController = TextEditingController();
  final TextEditingController timeController = TextEditingController();
  final TextEditingController doseController = TextEditingController();

  String mealTime = '‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£';
  String type = '‡∏¢‡∏≤‡∏Å‡∏¥‡∏ô';
  String importance = '‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤';

  final List<String> mealTimesForOral = ['‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≠‡∏ô'];
  final List<String> mealTimesForOther = ['‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≠‡∏ô', '‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£'];

  final List<String> types = ['‡∏¢‡∏≤‡∏Å‡∏¥‡∏ô', '‡∏¢‡∏≤‡∏ó‡∏≤', '‡∏¢‡∏≤‡∏â‡∏µ‡∏î'];
  final List<String> importances = ['‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤', '‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç', '‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å'];

  @override
  void initState() {
    super.initState();
    NotificationService.init(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å init notification
    loadMedications();
  }

  List<String> getMealTimesByType(String type) {
    return type == '‡∏¢‡∏≤‡∏Å‡∏¥‡∏ô' ? mealTimesForOral : mealTimesForOther;
  }

  Future<void> loadMedications() async {
    final meds = await FirestoreAPI.getMedications(widget.username);
    final medsString =
        meds
            .map(
              (med) => med.map((key, value) => MapEntry(key, value.toString())),
            )
            .toList();
    setState(() => medications = medsString);
  }

  Future<void> addMedication() async {
    if (_formKey.currentState!.validate()) {
      try {
        final parts = timeController.text.trim().split(":");
        final now = DateTime.now();
        DateTime scheduledTime = DateTime(
          now.year,
          now.month,
          now.day,
          int.parse(parts[0]),
          int.parse(parts[1]),
        );
        if (scheduledTime.isBefore(now)) {
          scheduledTime = scheduledTime.add(const Duration(days: 1));
        }

        final medication = {
          'username': widget.username,
          'name': nameController.text.trim(),
          'mealTime': mealTime,
          'notifyTime': scheduledTime.toIso8601String(),
          'dose': doseController.text.trim(),
          'type': type,
          'importance': importance,
          'createdAt': now.toIso8601String(),
        };

        final success = await FirestoreAPI.addMedication(medication);

        if (success) {
          // ‚úÖ ‡πÉ‡∏ä‡πâ NotificationService ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á NotificationType
          await NotificationService.scheduleNotification(
            id: DateTime.now().millisecondsSinceEpoch ~/ 1000,
            title: '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤ üíä',
            body: '${nameController.text} - ${doseController.text} ‡πÄ‡∏°‡πá‡∏î',
            scheduledTime: scheduledTime,
          );

          ScaffoldMessenger.of(
            context,
          ).showSnackBar(const SnackBar(content: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')));

          nameController.clear();
          timeController.clear();
          doseController.clear();
          setState(() {
            type = '‡∏¢‡∏≤‡∏Å‡∏¥‡∏ô';
            mealTime = '‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£';
            importance = '‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤';
          });
          loadMedications();
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≤')),
          );
        }
      } catch (e) {
        debugPrint("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e");
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'),
          ),
        );
      }
    }
  }

  Future<void> pickTime() async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.now(),
    );
    if (picked != null) {
      setState(() {
        timeController.text =
            '${picked.hour.toString().padLeft(2, '0')}:${picked.minute.toString().padLeft(2, '0')}';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final currentMealTimes = getMealTimesByType(type);
    if (!currentMealTimes.contains(mealTime)) mealTime = currentMealTimes.first;

    return Scaffold(
      appBar: AppBar(
        title: Text("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤ - ${widget.username}"),
        backgroundColor: Colors.green.shade700,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Card(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              elevation: 4,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Form(
                  key: _formKey,
                  child: Column(
                    children: [
                      _buildTextField(
                        nameController,
                        '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤',
                        Icons.medication,
                      ),
                      const SizedBox(height: 12),
                      _buildDropdown(
                        label: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤',
                        value: type,
                        items: types,
                        icon: Icons.category,
                        onChanged: (val) {
                          setState(() {
                            type = val!;
                            mealTime = getMealTimesByType(type).first;
                          });
                        },
                      ),
                      const SizedBox(height: 12),
                      _buildDropdown(
                        label: '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤',
                        value: mealTime,
                        items: currentMealTimes,
                        icon: Icons.access_time,
                        onChanged: (val) => setState(() => mealTime = val!),
                      ),
                      const SizedBox(height: 12),
                      GestureDetector(
                        onTap: pickTime,
                        child: AbsorbPointer(
                          child: _buildTextField(
                            timeController,
                            '‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (HH:mm)',
                            Icons.notifications,
                            validator:
                                (v) =>
                                    v!.isEmpty
                                        ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'
                                        : null,
                          ),
                        ),
                      ),
                      const SizedBox(height: 12),
                      _buildTextField(
                        doseController,
                        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡πá‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                        Icons.format_list_numbered,
                        keyboard: TextInputType.number,
                        validator:
                            (v) => v!.isEmpty ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡πá‡∏î' : null,
                      ),
                      const SizedBox(height: 12),
                      _buildDropdown(
                        label: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
                        value: importance,
                        items: importances,
                        icon: Icons.priority_high,
                        onChanged: (val) => setState(() => importance = val!),
                      ),
                      const SizedBox(height: 20),
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          onPressed: addMedication,
                          icon: const Icon(Icons.save),
                          label: const Text("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≤"),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
            const SizedBox(height: 30),
            Text(
              "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 10),
            medications.isEmpty
                ? const Text('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤')
                : ListView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: medications.length,
                  itemBuilder: (context, index) {
                    final med = medications[index];
                    return ListTile(
                      title: Text(
                        med['name']!,
                        overflow: TextOverflow.ellipsis,
                      ),
                      subtitle: Row(
                        children: [
                          Expanded(
                            child: Text(
                              '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${med['notifyTime']}',
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                          const SizedBox(width: 10),
                          Text('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${med['dose']}'),
                        ],
                      ),
                    );
                  },
                ),
          ],
        ),
      ),
    );
  }

  Widget _buildTextField(
    TextEditingController controller,
    String label,
    IconData icon, {
    TextInputType keyboard = TextInputType.text,
    String? Function(String?)? validator,
  }) {
    return TextFormField(
      controller: controller,
      keyboardType: keyboard,
      validator: validator ?? (v) => v!.isEmpty ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å $label' : null,
      decoration: InputDecoration(labelText: label, prefixIcon: Icon(icon)),
    );
  }

  Widget _buildDropdown({
    required String label,
    required String value,
    required List<String> items,
    required IconData icon,
    required ValueChanged<String?> onChanged,
  }) {
    return DropdownButtonFormField<String>(
      value: value,
      items:
          items.map((e) => DropdownMenuItem(value: e, child: Text(e))).toList(),
      onChanged: onChanged,
      decoration: InputDecoration(labelText: label, prefixIcon: Icon(icon)),
    );
  }
}
